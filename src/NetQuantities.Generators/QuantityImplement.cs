// ------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン: 17.0.0.0
//  
//     このファイルへの変更は、正しくない動作の原因になる可能性があり、
//     コードが再生成されると失われます。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace NetQuantities.Generators
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class QuantityImplement : QuantityImplementBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"#nullable enable
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Numerics;
using System.Runtime.InteropServices;
using System.Text;

namespace NetQuantities;


[StructLayout(LayoutKind.Sequential, Pack = 1, Size = sizeof(double))]
partial struct ");
            
            #line 20 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("\r\n    : IComparable\r\n    , IComparable<");
            
            #line 22 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n    , IEquatable<");
            
            #line 23 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n    , IFormattable\r\n#if NET6_0_OR_GREATER\r\n    , ISpanFormattable\r\n#endif\r\n#if" +
                    " NET7_0_OR_GREATER\r\n    , IComparisonOperators<");
            
            #line 29 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 29 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", bool>\r\n    , IAdditionOperators<");
            
            #line 30 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 30 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 30 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n    , ISubtractionOperators<");
            
            #line 31 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 31 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 31 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n    , IMultiplyOperators<");
            
            #line 32 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", QDimensionless, ");
            
            #line 32 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n    , IDivisionOperators<");
            
            #line 33 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 33 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", QDimensionless>\r\n");
            
            #line 34 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
 if(TargetTypeName != "QDimensionless") { 
            
            #line default
            #line hidden
            this.Write("    , IDivisionOperators<");
            
            #line 35 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", QDimensionless, ");
            
            #line 35 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n");
            
            #line 36 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    , IModulusOperators<");
            
            #line 37 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 37 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 37 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n    , IAdditiveIdentity<");
            
            #line 38 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 38 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n    , IMultiplicativeIdentity<");
            
            #line 39 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", QDimensionless>\r\n    , IUnaryPlusOperators<");
            
            #line 40 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 40 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n    , IUnaryNegationOperators<");
            
            #line 41 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 41 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n#endif\r\n{\r\n    private readonly double _RawValue;\r\n\r\n    /// <summary>\r\n    //" +
                    "/ The raw value of <see href=\"");
            
            #line 47 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("\" />.\r\n    /// </summary>\r\n    public double RawValue => _RawValue;\r\n\r\n    intern" +
                    "al ");
            
            #line 51 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("(double rawValue)\r\n        => _RawValue = rawValue;\r\n\r\n    #region unit definitio" +
                    "ns\r\n\r\n");
            
            #line 56 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
 foreach(var unit in UnitSymbols) { 
            
            #line default
            #line hidden
            this.Write("    /// <summary>\r\n    /// Creates a new <see href=\"");
            
            #line 58 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("\" /> instance by interpreting the given real value in the scale of [");
            
            #line 58 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.ShortName));
            
            #line default
            #line hidden
            this.Write("].\r\n    /// </summary>\r\n    /// <param name=\"Second\"></param>\r\n    /// <returns><" +
                    "/returns>\r\n    public static ");
            
            #line 62 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" From");
            
            #line 62 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));
            
            #line default
            #line hidden
            this.Write("(double ");
            
            #line 62 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));
            
            #line default
            #line hidden
            this.Write(")\r\n        => new (");
            
            #line 63 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));
            
            #line default
            #line hidden
            this.Write(" * ");
            
            #line 63 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.Scale));
            
            #line default
            #line hidden
            this.Write(");\r\n\r\n    /// <summary>\r\n    /// Gets the value of this instance in [");
            
            #line 66 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.ShortName));
            
            #line default
            #line hidden
            this.Write("] scale.\r\n    /// </summary>\r\n    public double ");
            
            #line 68 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));
            
            #line default
            #line hidden
            this.Write(" => _RawValue / ");
            
            #line 68 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.Scale));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n");
            
            #line 70 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    #endregion\r\n    \r\n    /// <summary>\r\n    /// Determines whether the 2 values " +
                    "are same or not.\r\n    /// </summary>\r\n    /// <param name=\"x\"></param>\r\n    /// " +
                    "<param name=\"y\"></param>\r\n    /// <returns></returns>\r\n    public static bool Eq" +
                    "uals(in ");
            
            #line 79 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, in ");
            
            #line 79 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(@" y) => x._RawValue == y._RawValue;

    /// <summary>
    /// Determines which value is greater than another.
    /// </summary>
    /// <param name=""x""></param>
    /// <param name=""y""></param>
    /// <returns></returns>
    public static int Compare(in ");
            
            #line 87 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, in ");
            
            #line 87 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(@" y)
    {
        if (x._RawValue == y._RawValue) { return 0; }
        return x._RawValue < y._RawValue ? -1 : 1;
    }

    /// <inheritdoc />
    public override string ToString()
        => ToString(null, CultureInfo.CurrentCulture);

    /// <inheritdoc />
    public override int GetHashCode()
        => _RawValue.GetHashCode();

    /// <inheritdoc />
    public override bool Equals([NotNullWhen(true)] object? obj)
        => obj is ");
            
            #line 103 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" other && Equals(this, other);\r\n\r\n    #region basic interface implements\r\n\r\n    /" +
                    "// <inheritdoc />\r\n    public int CompareTo(object? obj)\r\n        => obj is ");
            
            #line 109 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" other\r\n        ? Compare(this, other)\r\n        : throw new ArgumentException(nam" +
                    "eof(obj));\r\n\r\n    /// <inheritdoc />\r\n    public int CompareTo(");
            
            #line 114 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" other) => Compare(this, other);\r\n\r\n    /// <inheritdoc />\r\n    public bool Equal" +
                    "s(");
            
            #line 117 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(@" other) => Equals(this, other);

    /// <inheritdoc />
    public string ToString(string? format, IFormatProvider? formatProvider)
        => _RawValue.ToString(format, formatProvider);

#if NET6_0_OR_GREATER
    /// <inheritdoc />
    public bool TryFormat(Span<char> destination, out int charsWritten, ReadOnlySpan<char> format, IFormatProvider? provider)
        => _RawValue.TryFormat(destination, out charsWritten, format, provider);
#endif

    /// <inheritdoc />
    public static bool operator ==(");
            
            #line 130 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 130 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" y) => Equals(x, y);\r\n\r\n    /// <inheritdoc />\r\n    public static bool operator !" +
                    "=(");
            
            #line 133 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 133 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" y) => !Equals(x, y);\r\n\r\n    /// <inheritdoc />\r\n    public static bool operator " +
                    "<(");
            
            #line 136 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 136 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" y) => Compare(x, y) < 0;\r\n\r\n    /// <inheritdoc />\r\n    public static bool opera" +
                    "tor >(");
            
            #line 139 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 139 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" y) => Compare(x, y) > 0;\r\n\r\n    /// <inheritdoc />\r\n    public static bool opera" +
                    "tor <=(");
            
            #line 142 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 142 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" y) => Compare(x, y) <= 0;\r\n\r\n    /// <inheritdoc />\r\n    public static bool oper" +
                    "ator >=(");
            
            #line 145 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 145 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" y) => Compare(x, y) >= 0;\r\n\r\n    /// <inheritdoc />\r\n    public static ");
            
            #line 148 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" operator +(");
            
            #line 148 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 148 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" y) => new (x._RawValue + y._RawValue);\r\n\r\n    /// <inheritdoc />\r\n    public sta" +
                    "tic ");
            
            #line 151 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" operator-(");
            
            #line 151 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 151 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" y) => new (x._RawValue - y._RawValue);\r\n\r\n    /// <inheritdoc />\r\n    public sta" +
                    "tic ");
            
            #line 154 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" operator *(QDimensionless x, ");
            
            #line 154 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" y) => new (x * y._RawValue);\r\n\r\n    /// <inheritdoc />\r\n    public static QDimen" +
                    "sionless operator /(");
            
            #line 157 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 157 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" y) => x._RawValue / y._RawValue;\r\n\r\n");
            
            #line 159 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
 if(TargetTypeName != "QDimensionless") { 
            
            #line default
            #line hidden
            this.Write("    /// <inheritdoc />\r\n    public static ");
            
            #line 161 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" operator *(");
            
            #line 161 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, QDimensionless y) => new (x._RawValue * y);\r\n\r\n    /// <inheritdoc />\r\n    pu" +
                    "blic static ");
            
            #line 164 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" operator /(");
            
            #line 164 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, QDimensionless y) => new(x._RawValue / y);\r\n\r\n");
            
            #line 166 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    /// <inheritdoc />\r\n    public static ");
            
            #line 168 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" operator %(");
            
            #line 168 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 168 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" y) => new(x._RawValue % y._RawValue);\r\n\r\n    /// <inheritdoc />\r\n    public stat" +
                    "ic ");
            
            #line 171 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" AdditiveIdentity => default;\r\n\r\n    /// <inheritdoc />\r\n    public static QDimen" +
                    "sionless MultiplicativeIdentity => default;\r\n\r\n    /// <inheritdoc />\r\n    publi" +
                    "c static ");
            
            #line 177 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" operator +(");
            
            #line 177 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" value) => value;\r\n\r\n    /// <inheritdoc />\r\n    public static ");
            
            #line 180 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" operator -(");
            
            #line 180 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" value) => new(-value._RawValue);\r\n\r\n    #endregion\r\n}\r\n\r\n\r\n#region unit operatio" +
                    "ns\r\n");
            
            #line 187 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
 foreach(var op in UnitOperations) { 
            
            #line default
            #line hidden
            this.Write("\r\npartial struct ");
            
            #line 189 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write("\r\n#if NET7_0_OR_GREATER\r\n    : IDivisionOperators<");
            
            #line 191 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 191 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 191 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write(">\r\n    , IDivisionOperators<");
            
            #line 192 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 192 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 192 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write(">\r\n#endif\r\n{\r\n    /// <inheritdoc />\r\n    public static ");
            
            #line 196 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write(" operator /(");
            
            #line 196 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 196 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write(" y) => new(x.RawValue / y.RawValue);\r\n    \r\n    /// <inheritdoc />\r\n    public st" +
                    "atic ");
            
            #line 199 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write(" operator /(");
            
            #line 199 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 199 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write(" y) => new(x.RawValue / y.RawValue);\r\n}\r\n\r\npartial struct ");
            
            #line 202 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write("\r\n#if NET7_0_OR_GREATER\r\n    : IMultiplyOperators<");
            
            #line 204 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 204 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 204 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write(">\r\n#endif\r\n{\r\n    /// <inheritdoc />\r\n    public static ");
            
            #line 208 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write(" operator *(");
            
            #line 208 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 208 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write(" y) => new(x.RawValue * y.RawValue);\r\n}\r\n\r\npartial struct ");
            
            #line 211 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write("\r\n#if NET7_0_OR_GREATER\r\n    : IMultiplyOperators<");
            
            #line 213 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 213 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 213 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write(">\r\n#endif\r\n{\r\n    /// <inheritdoc />\r\n    public static ");
            
            #line 217 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write(" operator *(");
            
            #line 217 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 217 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write(" y) => new(x.RawValue * y.RawValue);\r\n}\r\n\r\n");
            
            #line 220 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
 } 
            
            #line default
            #line hidden
            this.Write("#endregion\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class QuantityImplementBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
