// ------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン: 17.0.0.0
//  
//     このファイルへの変更は、正しくない動作の原因になる可能性があり、
//     コードが再生成されると失われます。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace NetQuantities.Generators
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class QuantityImplement : QuantityImplementBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"#nullable enable
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Numerics;
using System.Runtime.InteropServices;
using System.Text;

namespace NetQuantities
{
    [StructLayout(LayoutKind.Sequential, Pack = 1, Size = sizeof(double))]
    public partial struct ");
            
            #line 20 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("\r\n        : IQuantity<");
            
            #line 21 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n        , IComparable<");
            
            #line 22 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n        , IEquatable<");
            
            #line 23 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n    #if NET7_0_OR_GREATER\r\n        , IComparisonOperators<");
            
            #line 25 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 25 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", bool>\r\n        , IAdditionOperators<");
            
            #line 26 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 26 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 26 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n        , ISubtractionOperators<");
            
            #line 27 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 27 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 27 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n        , IMultiplyOperators<");
            
            #line 28 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", double, ");
            
            #line 28 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n        , IDivisionOperators<");
            
            #line 29 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", double, ");
            
            #line 29 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n        , IDivisionOperators<");
            
            #line 30 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 30 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", double>\r\n        , IModulusOperators<");
            
            #line 31 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 31 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 31 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n        , IAdditiveIdentity<");
            
            #line 32 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 32 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n        , IMultiplicativeIdentity<");
            
            #line 33 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", double>\r\n        , IUnaryPlusOperators<");
            
            #line 34 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 34 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n        , IUnaryNegationOperators<");
            
            #line 35 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 35 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n    #endif\r\n    {\r\n        private readonly double _RawValue;\r\n\r\n        /// <" +
                    "summary>\r\n        /// The raw value of <see href=\"");
            
            #line 41 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("\" />.\r\n        /// </summary>\r\n        public double RawValue => _RawValue;\r\n\r\n  " +
                    "      internal ");
            
            #line 45 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(@"(double rawValue)
            => _RawValue = rawValue;

        /// <summary>
        /// Determines whether the 2 values are same or not.
        /// </summary>
        /// <param name=""x""></param>
        /// <param name=""y""></param>
        /// <returns></returns>
        public static bool Equals(in ");
            
            #line 54 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, in ");
            
            #line 54 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(@" y) => x._RawValue == y._RawValue;

        /// <summary>
        /// Determines which value is greater than another.
        /// </summary>
        /// <param name=""x""></param>
        /// <param name=""y""></param>
        /// <returns></returns>
        public static int Compare(in ");
            
            #line 62 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, in ");
            
            #line 62 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(@" y)
        {
            if (x._RawValue == y._RawValue) { return 0; }
            return x._RawValue < y._RawValue ? -1 : 1;
        }

        /// <summary>
        /// Tries to parse a string into a value.
        /// </summary>
        /// <param name=""s""></param>
        /// <param name=""provider""></param>
        /// <param name=""result""></param>
        /// <returns></returns>
        public static bool TryParse(string? s, IFormatProvider? provider, out ");
            
            #line 75 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" result)\r\n        {\r\n            if(!QuantityParseInfo.TryCompile(s, out var info" +
                    "))\r\n            {\r\n                result = default;\r\n                return fal" +
                    "se;\r\n            }\r\n            var (succeeded, value) = info.UnitSelector switc" +
                    "h {\r\n");
            
            #line 83 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
 foreach(var unit in UnitSymbols) { 
            
            #line default
            #line hidden
            this.Write("                \"");
            
            #line 84 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.ShortName));
            
            #line default
            #line hidden
            this.Write("\" => (double.TryParse(info.Number, NumberStyles.Any, provider, out var x), From");
            
            #line 84 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));
            
            #line default
            #line hidden
            this.Write("(x)),\r\n");
            
            #line 85 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"                _ => (false, default),
            };
            result = value;
            return succeeded;
        }

        /// <summary>
        /// Parses a string into a value.
        /// </summary>
        /// <param name=""s""></param>
        /// <param name=""provider""></param>
        /// <returns></returns>
        /// <exception cref=""ArgumentNullException""></exception>
        /// <exception cref=""FormatException""></exception>
        public static ");
            
            #line 100 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(@" Parse(string? s, IFormatProvider? provider)
        {
            if(s is null)
                throw new ArgumentNullException(nameof(s));
            if(!TryParse(s, provider, out var result))
                throw new FormatException();
            return result;
        }

        /// <inheritdoc />
        public override string ToString()
            => ToString(null, CultureInfo.CurrentCulture);

        /// <summary>
        /// Formats the value of the current instance using the specified format.
        /// </summary>
        /// <param name=""format"">
        /// The format to use. -or- A null reference (Nothing in Visual Basic) to use the
        /// default format defined for the type of the System.IFormattable implementation.
        /// </param>
        /// <returns>
        /// The value of the current instance in the specified format.
        /// </returns>
        public string ToString(string? format)
            => ToString(format, CultureInfo.CurrentCulture);

        private (QuantityFormatInfo info, string number, string unit) GetFormatInfo(string? format, IFormatProvider? formatProvider)
        {
            if(!QuantityFormatInfo.TryCompile(format, out var info))
            {
                throw new FormatException();
            }

            var (value, unit) = info.UnitSelector switch {
");
            
            #line 134 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
 foreach(var unit in UnitSymbols) { 
            
            #line default
            #line hidden
            this.Write("                \"");
            
            #line 135 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.ShortName));
            
            #line default
            #line hidden
            this.Write("\" => (");
            
            #line 135 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));
            
            #line default
            #line hidden
            this.Write(", \"");
            
            #line 135 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.ShortName));
            
            #line default
            #line hidden
            this.Write("\"),\r\n");
            
            #line 136 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
 } 
            
            #line default
            #line hidden
            this.Write("                \"\" => (");
            
            #line 137 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryUnit.MajorName));
            
            #line default
            #line hidden
            this.Write(", \"");
            
            #line 137 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryUnit.ShortName));
            
            #line default
            #line hidden
            this.Write("\"),\r\n                _ => throw new FormatException(),\r\n            };\r\n         " +
                    "   var number = string.Format(formatProvider, \"{0:\" + info.NumberFormat + \"}\", v" +
                    "alue);\r\n            return (info, number, unit);\r\n        }\r\n\r\n        /// <inhe" +
                    "ritdoc />\r\n        public string ToString(string? format, IFormatProvider? forma" +
                    "tProvider)\r\n        {\r\n            var (info, number, unit) = GetFormatInfo(form" +
                    "at, formatProvider);\r\n            return info.Format(number, unit);\r\n        }\r\n" +
                    "\r\n#if NET6_0_OR_GREATER\r\n        /// <inheritdoc />\r\n#else\r\n        /// <summary" +
                    ">\r\n        /// Tries to format the value of the current instance into the provid" +
                    "ed span of characters.\r\n        /// </summary>\r\n        /// <param name=\"destina" +
                    "tion\">The span in which to write this instance\'s value formatted as a span of ch" +
                    "aracters.</param>\r\n        /// <param name=\"charsWritten\">When this method retur" +
                    "ns, contains the number of characters that were written in <paramref name=\"desti" +
                    "nation\"/>.</param>\r\n        /// <param name=\"format\">A span containing the chara" +
                    "cters that represent a standard or custom format string that defines the accepta" +
                    "ble format for <paramref name=\"destination\"/>.</param>\r\n        /// <param name=" +
                    "\"formatProvider\">An optional object that supplies culture-specific formatting in" +
                    "formation for <paramref name=\"destination\"/>.</param>\r\n        /// <returns><c>t" +
                    "rue</c> if the formatting was successful; otherwise, <c>false</c>.</returns>\r\n#e" +
                    "ndif\r\n        public bool TryFormat(Span<char> destination, out int charsWritten" +
                    ", ReadOnlySpan<char> format, IFormatProvider? formatProvider)\r\n        {\r\n      " +
                    "      var (info, number, unit) = GetFormatInfo(format.ToString(), formatProvider" +
                    ");\r\n            return info.TryFormat(destination, out charsWritten, number, uni" +
                    "t);\r\n        }\r\n\r\n\r\n        /// <inheritdoc />\r\n        public override int GetH" +
                    "ashCode()\r\n            => _RawValue.GetHashCode();\r\n\r\n        /// <inheritdoc />" +
                    "\r\n        public override bool Equals([NotNullWhen(true)] object? obj)\r\n        " +
                    "    => obj is ");
            
            #line 176 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(@" other && Equals(this, other);

        #region unit definitions

        /// <summary> The unit informations dictionary which is keyed by unit symbols. </summary>
        public static readonly ImmutableDictionary<string, UnitInfo> UnitsBySymbol = GetUnitsBySymbol();
        private static ImmutableDictionary<string, UnitInfo> GetUnitsBySymbol()
        {
            var builder = ImmutableDictionary.CreateBuilder<string, UnitInfo>();
");
            
            #line 185 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
 foreach(var unit in UnitSymbols) { 
            
            #line default
            #line hidden
            this.Write("            builder.Add(\"");
            
            #line 186 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.ShortName));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 186 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));
            
            #line default
            #line hidden
            this.Write("Info);\r\n");
            
            #line 187 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
 } 
            
            #line default
            #line hidden
            this.Write("            return builder.ToImmutable();\r\n        }\r\n\r\n");
            
            #line 191 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
 foreach(var unit in UnitSymbols) { 
            
            #line default
            #line hidden
            this.Write("        #region ");
            
            #line 192 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n        private const double _");
            
            #line 194 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));
            
            #line default
            #line hidden
            this.Write("Scale = ");
            
            #line 194 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.Scale));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n        /// <summary> The information for [");
            
            #line 196 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.ShortName));
            
            #line default
            #line hidden
            this.Write("]. </summary>\r\n        public static readonly UnitInfo ");
            
            #line 197 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));
            
            #line default
            #line hidden
            this.Write("Info = new (_");
            
            #line 197 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));
            
            #line default
            #line hidden
            this.Write("Scale, \"");
            
            #line 197 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));
            
            #line default
            #line hidden
            this.Write("\", \"");
            
            #line 197 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.ShortName));
            
            #line default
            #line hidden
            this.Write("\");\r\n\r\n        /// <summary>\r\n        /// Creates a new <see href=\"");
            
            #line 200 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("\" /> instance by interpreting the given real value in the scale of [");
            
            #line 200 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.ShortName));
            
            #line default
            #line hidden
            this.Write("].\r\n        /// </summary>\r\n        /// <param name=\"Second\"></param>\r\n        //" +
                    "/ <returns></returns>\r\n        public static ");
            
            #line 204 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" From");
            
            #line 204 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));
            
            #line default
            #line hidden
            this.Write("(double ");
            
            #line 204 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));
            
            #line default
            #line hidden
            this.Write(")\r\n            => new (");
            
            #line 205 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));
            
            #line default
            #line hidden
            this.Write(" * _");
            
            #line 205 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));
            
            #line default
            #line hidden
            this.Write("Scale);\r\n\r\n        /// <summary>\r\n        /// Gets the value of this instance in " +
                    "[");
            
            #line 208 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.ShortName));
            
            #line default
            #line hidden
            this.Write("] scale.\r\n        /// </summary>\r\n        public double ");
            
            #line 210 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));
            
            #line default
            #line hidden
            this.Write(" => _RawValue / _");
            
            #line 210 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));
            
            #line default
            #line hidden
            this.Write("Scale;\r\n\r\n        #endregion\r\n\r\n");
            
            #line 214 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        #endregion\r\n\r\n        #region basic interface implements\r\n\r\n        /// <" +
                    "inheritdoc />\r\n        public int CompareTo(object? obj)\r\n            => obj is " +
                    "");
            
            #line 221 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" other\r\n            ? Compare(this, other)\r\n            : throw new ArgumentExcep" +
                    "tion(nameof(obj));\r\n\r\n        /// <inheritdoc />\r\n        public int CompareTo(");
            
            #line 226 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" other) => Compare(this, other);\r\n\r\n        /// <inheritdoc />\r\n        public bo" +
                    "ol Equals(");
            
            #line 229 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" other) => Equals(this, other);\r\n\r\n        /// <inheritdoc />\r\n        public sta" +
                    "tic bool operator ==(");
            
            #line 232 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 232 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" y) => Equals(x, y);\r\n\r\n        /// <inheritdoc />\r\n        public static bool op" +
                    "erator !=(");
            
            #line 235 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 235 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" y) => !Equals(x, y);\r\n\r\n        /// <inheritdoc />\r\n        public static bool o" +
                    "perator <(");
            
            #line 238 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 238 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" y) => Compare(x, y) < 0;\r\n\r\n        /// <inheritdoc />\r\n        public static bo" +
                    "ol operator >(");
            
            #line 241 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 241 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" y) => Compare(x, y) > 0;\r\n\r\n        /// <inheritdoc />\r\n        public static bo" +
                    "ol operator <=(");
            
            #line 244 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 244 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" y) => Compare(x, y) <= 0;\r\n\r\n        /// <inheritdoc />\r\n        public static b" +
                    "ool operator >=(");
            
            #line 247 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 247 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" y) => Compare(x, y) >= 0;\r\n\r\n        /// <inheritdoc />\r\n        public static ");
            
            #line 250 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" operator +(");
            
            #line 250 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 250 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" y) => new (x._RawValue + y._RawValue);\r\n\r\n        /// <inheritdoc />\r\n        pu" +
                    "blic static ");
            
            #line 253 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" operator-(");
            
            #line 253 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 253 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" y) => new (x._RawValue - y._RawValue);\r\n\r\n        /// <inheritdoc />\r\n        pu" +
                    "blic static ");
            
            #line 256 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" operator *(double x, ");
            
            #line 256 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" y) => new (x * y._RawValue);\r\n\r\n        /// <inheritdoc />\r\n        public stati" +
                    "c double operator /(");
            
            #line 259 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 259 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" y) => x._RawValue / y._RawValue;\r\n\r\n        /// <inheritdoc />\r\n        public s" +
                    "tatic ");
            
            #line 262 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" operator *(");
            
            #line 262 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, double y) => new (x._RawValue * y);\r\n\r\n        /// <inheritdoc />\r\n        pu" +
                    "blic static ");
            
            #line 265 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" operator /(");
            
            #line 265 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, double y) => new(x._RawValue / y);\r\n\r\n        /// <inheritdoc />\r\n        pub" +
                    "lic static ");
            
            #line 268 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" operator %(");
            
            #line 268 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 268 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" y) => new(x._RawValue % y._RawValue);\r\n\r\n        /// <inheritdoc />\r\n        pub" +
                    "lic static ");
            
            #line 271 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" AdditiveIdentity => default;\r\n\r\n        /// <inheritdoc />\r\n        public stati" +
                    "c double MultiplicativeIdentity => 1.0;\r\n\r\n        /// <inheritdoc />\r\n        p" +
                    "ublic static ");
            
            #line 277 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" operator +(");
            
            #line 277 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" value) => value;\r\n\r\n        /// <inheritdoc />\r\n        public static ");
            
            #line 280 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" operator -(");
            
            #line 280 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" value) => new(-value._RawValue);\r\n\r\n        #endregion\r\n    }\r\n\r\n\r\n    #region u" +
                    "nit operations\r\n");
            
            #line 287 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
 foreach(var op in UnitOperations) { 
            
            #line default
            #line hidden
            this.Write("\r\n    partial struct ");
            
            #line 289 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write("\r\n    #if NET7_0_OR_GREATER\r\n        : IDivisionOperators<");
            
            #line 291 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 291 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 291 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write(">\r\n    #endif\r\n    {\r\n        /// <inheritdoc />\r\n        public static ");
            
            #line 295 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write(" operator /(");
            
            #line 295 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 295 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write(" y) => new(x.RawValue / y.RawValue);\r\n    }\r\n\r\n    partial struct ");
            
            #line 298 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write("\r\n    #if NET7_0_OR_GREATER\r\n        : IMultiplyOperators<");
            
            #line 300 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 300 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 300 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write(">\r\n    #endif\r\n    {\r\n        /// <inheritdoc />\r\n        public static ");
            
            #line 304 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write(" operator *(");
            
            #line 304 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 304 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write(" y) => new(x.RawValue * y.RawValue);\r\n    }\r\n    \r\n");
            
            #line 307 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
     if(op.MultiplierType != op.MultiplicantType) { 
            
            #line default
            #line hidden
            this.Write("    partial struct ");
            
            #line 308 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write("\r\n    #if NET7_0_OR_GREATER\r\n        : IDivisionOperators<");
            
            #line 310 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 310 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 310 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write(">\r\n    #endif\r\n    {\r\n        /// <inheritdoc />\r\n        public static ");
            
            #line 314 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write(" operator /(");
            
            #line 314 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 314 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write(" y) => new(x.RawValue / y.RawValue);\r\n    }\r\n\r\n    partial struct ");
            
            #line 317 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write("\r\n    #if NET7_0_OR_GREATER\r\n        : IMultiplyOperators<");
            
            #line 319 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 319 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 319 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write(">\r\n    #endif\r\n    {\r\n        /// <inheritdoc />\r\n        public static ");
            
            #line 323 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write(" operator *(");
            
            #line 323 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 323 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write(" y) => new(x.RawValue * y.RawValue);\r\n    }\r\n");
            
            #line 325 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
     } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 327 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    #endregion\r\n}\r\n\r\n\r\n#if NET7_0_OR_GREATER\r\nnamespace NetQuantities.Generic\r\n{\r" +
                    "\n    public partial struct ");
            
            #line 335 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>\r\n        : IQuantity<");
            
            #line 336 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>, T>\r\n        , IComparable<");
            
            #line 337 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>>\r\n        , IEquatable<");
            
            #line 338 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>>\r\n        , IComparisonOperators<");
            
            #line 339 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 339 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>, bool>\r\n        , IAdditionOperators<");
            
            #line 340 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 340 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 340 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>>\r\n        , ISubtractionOperators<");
            
            #line 341 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 341 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 341 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>>\r\n        , IMultiplyOperators<");
            
            #line 342 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>, T, ");
            
            #line 342 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>>\r\n        , IDivisionOperators<");
            
            #line 343 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 343 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>, T>\r\n        , IModulusOperators<");
            
            #line 344 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 344 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 344 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>>\r\n        , IAdditiveIdentity<");
            
            #line 345 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 345 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>>\r\n        , IMultiplicativeIdentity<");
            
            #line 346 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>, T>\r\n        , IUnaryPlusOperators<");
            
            #line 347 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 347 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>>\r\n        , IUnaryNegationOperators<");
            
            #line 348 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 348 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>>\r\n        where T : INumber<T>\r\n    {\r\n        private readonly T _RawValue;\r" +
                    "\n\r\n        /// <summary>\r\n        /// The raw value of <see href=\"");
            
            #line 354 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("{T}\" />.\r\n        /// </summary>\r\n        public T RawValue => _RawValue;\r\n\r\n    " +
                    "    internal ");
            
            #line 358 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(@"(T rawValue)
            => _RawValue = rawValue;

        /// <summary>
        /// Determines whether the 2 values are same or not.
        /// </summary>
        /// <param name=""x""></param>
        /// <param name=""y""></param>
        /// <returns></returns>
        public static bool Equals(in ");
            
            #line 367 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T> x, in ");
            
            #line 367 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(@"<T> y) => x._RawValue == y._RawValue;

        /// <summary>
        /// Determines which value is greater than another.
        /// </summary>
        /// <param name=""x""></param>
        /// <param name=""y""></param>
        /// <returns></returns>
        public static int Compare(in ");
            
            #line 375 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T> x, in ");
            
            #line 375 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(@"<T> y)
        {
            if (x._RawValue == y._RawValue) { return 0; }
            return x._RawValue < y._RawValue ? -1 : 1;
        }

        /// <summary>
        /// Tries to parse a string into a value.
        /// </summary>
        /// <param name=""s""></param>
        /// <param name=""provider""></param>
        /// <param name=""result""></param>
        /// <returns></returns>
        public static bool TryParse(string? s, IFormatProvider? provider, out ");
            
            #line 388 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T> result)\r\n        {\r\n            if(!QuantityParseInfo.TryCompile(s, out var i" +
                    "nfo))\r\n            {\r\n                result = default;\r\n                return " +
                    "false;\r\n            }\r\n            var (succeeded, value) = info.UnitSelector sw" +
                    "itch {\r\n");
            
            #line 396 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
 foreach(var unit in UnitSymbols) { 
            
            #line default
            #line hidden
            this.Write("                \"");
            
            #line 397 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.ShortName));
            
            #line default
            #line hidden
            this.Write("\" => (T.TryParse(info.Number, provider, out var x), From");
            
            #line 397 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));
            
            #line default
            #line hidden
            this.Write("(x)),\r\n");
            
            #line 398 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"                _ => (false, default),
            };
            result = value;
            return succeeded;
        }

        /// <summary>
        /// Parses a string into a value.
        /// </summary>
        /// <param name=""s""></param>
        /// <param name=""provider""></param>
        /// <returns></returns>
        /// <exception cref=""ArgumentNullException""></exception>
        /// <exception cref=""FormatException""></exception>
        public static ");
            
            #line 413 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(@"<T> Parse(string? s, IFormatProvider? provider)
        {
            if(s is null)
                throw new ArgumentNullException(nameof(s));
            if(!TryParse(s, provider, out var result))
                throw new FormatException();
            return result;
        }

        /// <inheritdoc />
        public override string ToString()
            => ToString(null, CultureInfo.CurrentCulture);

        /// <inheritdoc />
        public override int GetHashCode()
            => _RawValue.GetHashCode();

        /// <inheritdoc />
        public override bool Equals([NotNullWhen(true)] object? obj)
            => obj is ");
            
            #line 432 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(@"<T> other && Equals(this, other);

        #region unit definitions
        
        /// <summary> The unit informations dictionary which is keyed by unit symbols. </summary>
        public static readonly ImmutableDictionary<string, UnitInfo<T>> UnitsBySymbol = GetUnitsBySymbol();
        private static ImmutableDictionary<string, UnitInfo<T>> GetUnitsBySymbol()
        {
            var builder = ImmutableDictionary.CreateBuilder<string, UnitInfo<T>>();
");
            
            #line 441 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
 foreach(var unit in UnitSymbols) { 
            
            #line default
            #line hidden
            this.Write("            builder.Add(\"");
            
            #line 442 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.ShortName));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 442 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));
            
            #line default
            #line hidden
            this.Write("Info);\r\n");
            
            #line 443 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
 } 
            
            #line default
            #line hidden
            this.Write("            return builder.ToImmutable();\r\n        }\r\n\r\n");
            
            #line 447 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
 foreach(var unit in UnitSymbols) { 
            
            #line default
            #line hidden
            this.Write("        #region ");
            
            #line 448 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n        private static readonly T _");
            
            #line 450 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));
            
            #line default
            #line hidden
            this.Write("Scale = T.CreateSaturating(");
            
            #line 450 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.Scale));
            
            #line default
            #line hidden
            this.Write(");\r\n\r\n        /// <summary> The information for [");
            
            #line 452 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.ShortName));
            
            #line default
            #line hidden
            this.Write("]. </summary>\r\n        public static readonly UnitInfo<T> ");
            
            #line 453 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));
            
            #line default
            #line hidden
            this.Write("Info = new (_");
            
            #line 453 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));
            
            #line default
            #line hidden
            this.Write("Scale, \"");
            
            #line 453 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));
            
            #line default
            #line hidden
            this.Write("\", \"");
            
            #line 453 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.ShortName));
            
            #line default
            #line hidden
            this.Write("\");\r\n\r\n        /// <summary>\r\n        /// Creates a new <see href=\"");
            
            #line 456 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("{T}\" /> instance by interpreting the given real value in the scale of [");
            
            #line 456 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.ShortName));
            
            #line default
            #line hidden
            this.Write("].\r\n        /// </summary>\r\n        /// <param name=\"Second\"></param>\r\n        //" +
                    "/ <returns></returns>\r\n        public static ");
            
            #line 460 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T> From");
            
            #line 460 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));
            
            #line default
            #line hidden
            this.Write("(T ");
            
            #line 460 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));
            
            #line default
            #line hidden
            this.Write(")\r\n            => new (");
            
            #line 461 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));
            
            #line default
            #line hidden
            this.Write(" * _");
            
            #line 461 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));
            
            #line default
            #line hidden
            this.Write("Scale);\r\n\r\n        /// <summary>\r\n        /// Gets the value of this instance in " +
                    "[");
            
            #line 464 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.ShortName));
            
            #line default
            #line hidden
            this.Write("] scale.\r\n        /// </summary>\r\n        public T ");
            
            #line 466 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));
            
            #line default
            #line hidden
            this.Write(" => _RawValue / _");
            
            #line 466 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));
            
            #line default
            #line hidden
            this.Write("Scale;\r\n\r\n        #endregion\r\n\r\n");
            
            #line 470 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        #endregion\r\n\r\n        #region basic interface implements\r\n\r\n        /// <" +
                    "inheritdoc />\r\n        public int CompareTo(object? obj)\r\n            => obj is " +
                    "");
            
            #line 477 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T> other\r\n            ? Compare(this, other)\r\n            : throw new ArgumentEx" +
                    "ception(nameof(obj));\r\n\r\n        /// <inheritdoc />\r\n        public int CompareT" +
                    "o(");
            
            #line 482 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T> other) => Compare(this, other);\r\n\r\n        /// <inheritdoc />\r\n        public" +
                    " bool Equals(");
            
            #line 485 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(@"<T> other) => Equals(this, other);

        /// <summary>
        /// Formats the value of the current instance using the specified format.
        /// </summary>
        /// <param name=""format"">
        /// The format to use. -or- A null reference (Nothing in Visual Basic) to use the
        /// default format defined for the type of the System.IFormattable implementation.
        /// </param>
        /// <returns>
        /// The value of the current instance in the specified format.
        /// </returns>
        public string ToString(string? format)
            => ToString(format, CultureInfo.CurrentCulture);

        /// <inheritdoc />
        public string ToString(string? format, IFormatProvider? formatProvider)
        {
            if(!QuantityFormatInfo.TryCompile(format, out var info))
            {
                throw new FormatException();
            }

            var (value, unit) = info.UnitSelector switch {
");
            
            #line 509 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
 foreach(var unit in UnitSymbols) { 
            
            #line default
            #line hidden
            this.Write("                \"");
            
            #line 510 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.ShortName));
            
            #line default
            #line hidden
            this.Write("\" => (");
            
            #line 510 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));
            
            #line default
            #line hidden
            this.Write(", \"");
            
            #line 510 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.ShortName));
            
            #line default
            #line hidden
            this.Write("\"),\r\n");
            
            #line 511 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
 } 
            
            #line default
            #line hidden
            this.Write("                \"\" => (");
            
            #line 512 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryUnit.MajorName));
            
            #line default
            #line hidden
            this.Write(", \"");
            
            #line 512 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryUnit.ShortName));
            
            #line default
            #line hidden
            this.Write(@"""),
                _ => throw new FormatException(),
            };
            var number = string.Format(""{0:"" + info.NumberFormat + ""}"", value);
            var (open, close) = info.HasBrackets ? (""["", ""]"") : ("""", """");
            return $""{number}{info.Spacing}{open}{unit}{close}"";
        }

        /// <inheritdoc />
        public bool TryFormat(Span<char> destination, out int charsWritten, ReadOnlySpan<char> format, IFormatProvider? provider)
        {
            var str = ToString(format.ToString(), provider);
            if(destination.Length < str.Length)
            {
                charsWritten = default;
                return false;
            }
            str.AsSpan().CopyTo(destination);
            charsWritten = str.Length;
            return true;
        }

        /// <inheritdoc />
        public static bool operator ==(");
            
            #line 535 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T> x, ");
            
            #line 535 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T> y) => Equals(x, y);\r\n\r\n        /// <inheritdoc />\r\n        public static bool" +
                    " operator !=(");
            
            #line 538 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T> x, ");
            
            #line 538 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T> y) => !Equals(x, y);\r\n\r\n        /// <inheritdoc />\r\n        public static boo" +
                    "l operator <(");
            
            #line 541 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T> x, ");
            
            #line 541 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T> y) => Compare(x, y) < 0;\r\n\r\n        /// <inheritdoc />\r\n        public static" +
                    " bool operator >(");
            
            #line 544 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T> x, ");
            
            #line 544 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T> y) => Compare(x, y) > 0;\r\n\r\n        /// <inheritdoc />\r\n        public static" +
                    " bool operator <=(");
            
            #line 547 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T> x, ");
            
            #line 547 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T> y) => Compare(x, y) <= 0;\r\n\r\n        /// <inheritdoc />\r\n        public stati" +
                    "c bool operator >=(");
            
            #line 550 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T> x, ");
            
            #line 550 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T> y) => Compare(x, y) >= 0;\r\n\r\n        /// <inheritdoc />\r\n        public stati" +
                    "c ");
            
            #line 553 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T> operator +(");
            
            #line 553 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T> x, ");
            
            #line 553 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T> y) => new (x._RawValue + y._RawValue);\r\n\r\n        /// <inheritdoc />\r\n       " +
                    " public static ");
            
            #line 556 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T> operator-(");
            
            #line 556 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T> x, ");
            
            #line 556 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T> y) => new (x._RawValue - y._RawValue);\r\n\r\n        /// <inheritdoc />\r\n       " +
                    " public static ");
            
            #line 559 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T> operator *(T x, ");
            
            #line 559 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T> y) => new (x * y._RawValue);\r\n\r\n        /// <inheritdoc />\r\n        public st" +
                    "atic T operator /(");
            
            #line 562 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T> x, ");
            
            #line 562 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T> y) => x._RawValue / y._RawValue;\r\n\r\n        /// <inheritdoc />\r\n        publi" +
                    "c static ");
            
            #line 565 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T> operator *(");
            
            #line 565 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T> x, T y) => new (x._RawValue * y);\r\n\r\n        /// <inheritdoc />\r\n        publ" +
                    "ic static ");
            
            #line 568 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T> operator /(");
            
            #line 568 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T> x, T y) => new(x._RawValue / y);\r\n\r\n        /// <inheritdoc />\r\n        publi" +
                    "c static ");
            
            #line 571 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T> operator %(");
            
            #line 571 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T> x, ");
            
            #line 571 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T> y) => new(x._RawValue % y._RawValue);\r\n\r\n        /// <inheritdoc />\r\n        " +
                    "public static ");
            
            #line 574 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T> AdditiveIdentity => default;\r\n\r\n        /// <inheritdoc />\r\n        public st" +
                    "atic T MultiplicativeIdentity => T.One;\r\n\r\n        /// <inheritdoc />\r\n        p" +
                    "ublic static ");
            
            #line 580 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T> operator +(");
            
            #line 580 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T> value) => value;\r\n\r\n        /// <inheritdoc />\r\n        public static ");
            
            #line 583 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T> operator -(");
            
            #line 583 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(@"<T> value) => new(-value._RawValue);

        #endregion
    }


    #region unit operations

    /// NOTE: In specific case recursive generic interface causes JIT compile time increasing exponentially.
    /// Therefore interface implementations are comment-outed until .Net runtime is improved.

");
            
            #line 594 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
 foreach(var op in UnitOperations) { 
            
            #line default
            #line hidden
            this.Write("\r\n    partial struct ");
            
            #line 596 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write("<T>\r\n//        : IDivisionOperators<");
            
            #line 597 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 597 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 597 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write("<T>>\r\n    {\r\n        /// <inheritdoc />\r\n        public static ");
            
            #line 600 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write("<T> operator /(");
            
            #line 600 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write("<T> x, ");
            
            #line 600 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write("<T> y) => new(x.RawValue / y.RawValue);\r\n    }\r\n\r\n    partial struct ");
            
            #line 603 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write("<T>\r\n//        : IMultiplyOperators<");
            
            #line 604 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 604 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 604 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write("<T>>\r\n    {\r\n        /// <inheritdoc />\r\n        public static ");
            
            #line 607 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write("<T> operator *(");
            
            #line 607 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write("<T> x, ");
            
            #line 607 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write("<T> y) => new(x.RawValue * y.RawValue);\r\n    }\r\n    \r\n");
            
            #line 610 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
     if(op.MultiplierType != op.MultiplicantType) { 
            
            #line default
            #line hidden
            this.Write("    partial struct ");
            
            #line 611 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write("<T>\r\n//        : IDivisionOperators<");
            
            #line 612 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 612 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 612 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write("<T>>\r\n    {\r\n        /// <inheritdoc />\r\n        public static ");
            
            #line 615 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write("<T> operator /(");
            
            #line 615 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write("<T> x, ");
            
            #line 615 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write("<T> y) => new(x.RawValue / y.RawValue);\r\n    }\r\n\r\n    partial struct ");
            
            #line 618 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write("<T>\r\n//        : IMultiplyOperators<");
            
            #line 619 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 619 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 619 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write("<T>>\r\n    {\r\n        /// <inheritdoc />\r\n        public static ");
            
            #line 622 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write("<T> operator *(");
            
            #line 622 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write("<T> x, ");
            
            #line 622 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write("<T> y) => new(x.RawValue * y.RawValue);\r\n    }\r\n");
            
            #line 624 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
     } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 626 "D:\develop\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    #endregion\r\n}\r\n#endif\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class QuantityImplementBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
