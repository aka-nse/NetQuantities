// ------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン: 17.0.0.0
//  
//     このファイルへの変更は、正しくない動作の原因になる可能性があり、
//     コードが再生成されると失われます。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace NetQuantities.Generators
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class QuantityImplement : QuantityImplementBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"#nullable enable
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Numerics;
using System.Runtime.InteropServices;
using System.Text;

namespace NetQuantities
{
    [StructLayout(LayoutKind.Sequential, Pack = 1, Size = sizeof(double))]
    partial struct ");
            
            #line 19 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("\r\n        : IComparable\r\n        , IComparable<");
            
            #line 21 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n        , IEquatable<");
            
            #line 22 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n        , IFormattable\r\n    #if NET6_0_OR_GREATER\r\n        , ISpanFormattable\r" +
                    "\n    #endif\r\n    #if NET7_0_OR_GREATER\r\n        , IComparisonOperators<");
            
            #line 28 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 28 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", bool>\r\n        , IAdditionOperators<");
            
            #line 29 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 29 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 29 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n        , ISubtractionOperators<");
            
            #line 30 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 30 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 30 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n        , IMultiplyOperators<");
            
            #line 31 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", QDimensionless, ");
            
            #line 31 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n        , IDivisionOperators<");
            
            #line 32 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 32 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", QDimensionless>\r\n");
            
            #line 33 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
 if(TargetTypeName != "QDimensionless") { 
            
            #line default
            #line hidden
            this.Write("        , IDivisionOperators<");
            
            #line 34 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", QDimensionless, ");
            
            #line 34 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n");
            
            #line 35 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        , IModulusOperators<");
            
            #line 36 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 36 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 36 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n        , IAdditiveIdentity<");
            
            #line 37 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 37 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n        , IMultiplicativeIdentity<");
            
            #line 38 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", QDimensionless>\r\n        , IUnaryPlusOperators<");
            
            #line 39 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 39 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n        , IUnaryNegationOperators<");
            
            #line 40 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 40 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n    #endif\r\n    {\r\n        private readonly double _RawValue;\r\n\r\n        /// <" +
                    "summary>\r\n        /// The raw value of <see href=\"");
            
            #line 46 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("\" />.\r\n        /// </summary>\r\n        public double RawValue => _RawValue;\r\n\r\n  " +
                    "      internal ");
            
            #line 50 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("(double rawValue)\r\n            => _RawValue = rawValue;\r\n\r\n        #region unit d" +
                    "efinitions\r\n\r\n");
            
            #line 55 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
 foreach(var unit in UnitSymbols) { 
            
            #line default
            #line hidden
            this.Write("        /// <summary>\r\n        /// Creates a new <see href=\"");
            
            #line 57 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("\" /> instance by interpreting the given real value in the scale of [");
            
            #line 57 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.ShortName));
            
            #line default
            #line hidden
            this.Write("].\r\n        /// </summary>\r\n        /// <param name=\"Second\"></param>\r\n        //" +
                    "/ <returns></returns>\r\n        public static ");
            
            #line 61 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" From");
            
            #line 61 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));
            
            #line default
            #line hidden
            this.Write("(double ");
            
            #line 61 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));
            
            #line default
            #line hidden
            this.Write(")\r\n            => new (");
            
            #line 62 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));
            
            #line default
            #line hidden
            this.Write(" * ");
            
            #line 62 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.Scale));
            
            #line default
            #line hidden
            this.Write(");\r\n\r\n        /// <summary>\r\n        /// Gets the value of this instance in [");
            
            #line 65 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.ShortName));
            
            #line default
            #line hidden
            this.Write("] scale.\r\n        /// </summary>\r\n        public double ");
            
            #line 67 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));
            
            #line default
            #line hidden
            this.Write(" => _RawValue / ");
            
            #line 67 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.Scale));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n");
            
            #line 69 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"        #endregion
    
        /// <summary>
        /// Determines whether the 2 values are same or not.
        /// </summary>
        /// <param name=""x""></param>
        /// <param name=""y""></param>
        /// <returns></returns>
        public static bool Equals(in ");
            
            #line 78 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, in ");
            
            #line 78 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(@" y) => x._RawValue == y._RawValue;

        /// <summary>
        /// Determines which value is greater than another.
        /// </summary>
        /// <param name=""x""></param>
        /// <param name=""y""></param>
        /// <returns></returns>
        public static int Compare(in ");
            
            #line 86 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, in ");
            
            #line 86 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(@" y)
        {
            if (x._RawValue == y._RawValue) { return 0; }
            return x._RawValue < y._RawValue ? -1 : 1;
        }

        /// <inheritdoc />
        public override string ToString()
            => ToString(null, CultureInfo.CurrentCulture);

        /// <inheritdoc />
        public override int GetHashCode()
            => _RawValue.GetHashCode();

        /// <inheritdoc />
        public override bool Equals([NotNullWhen(true)] object? obj)
            => obj is ");
            
            #line 102 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" other && Equals(this, other);\r\n\r\n        #region basic interface implements\r\n\r\n " +
                    "       /// <inheritdoc />\r\n        public int CompareTo(object? obj)\r\n          " +
                    "  => obj is ");
            
            #line 108 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" other\r\n            ? Compare(this, other)\r\n            : throw new ArgumentExcep" +
                    "tion(nameof(obj));\r\n\r\n        /// <inheritdoc />\r\n        public int CompareTo(");
            
            #line 113 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" other) => Compare(this, other);\r\n\r\n        /// <inheritdoc />\r\n        public bo" +
                    "ol Equals(");
            
            #line 116 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(@" other) => Equals(this, other);

        /// <inheritdoc />
        public string ToString(string? format, IFormatProvider? formatProvider)
            => _RawValue.ToString(format, formatProvider);

    #if NET6_0_OR_GREATER
        /// <inheritdoc />
        public bool TryFormat(Span<char> destination, out int charsWritten, ReadOnlySpan<char> format, IFormatProvider? provider)
            => _RawValue.TryFormat(destination, out charsWritten, format, provider);
    #endif

        /// <inheritdoc />
        public static bool operator ==(");
            
            #line 129 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 129 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" y) => Equals(x, y);\r\n\r\n        /// <inheritdoc />\r\n        public static bool op" +
                    "erator !=(");
            
            #line 132 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 132 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" y) => !Equals(x, y);\r\n\r\n        /// <inheritdoc />\r\n        public static bool o" +
                    "perator <(");
            
            #line 135 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 135 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" y) => Compare(x, y) < 0;\r\n\r\n        /// <inheritdoc />\r\n        public static bo" +
                    "ol operator >(");
            
            #line 138 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 138 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" y) => Compare(x, y) > 0;\r\n\r\n        /// <inheritdoc />\r\n        public static bo" +
                    "ol operator <=(");
            
            #line 141 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 141 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" y) => Compare(x, y) <= 0;\r\n\r\n        /// <inheritdoc />\r\n        public static b" +
                    "ool operator >=(");
            
            #line 144 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 144 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" y) => Compare(x, y) >= 0;\r\n\r\n        /// <inheritdoc />\r\n        public static ");
            
            #line 147 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" operator +(");
            
            #line 147 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 147 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" y) => new (x._RawValue + y._RawValue);\r\n\r\n        /// <inheritdoc />\r\n        pu" +
                    "blic static ");
            
            #line 150 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" operator-(");
            
            #line 150 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 150 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" y) => new (x._RawValue - y._RawValue);\r\n\r\n        /// <inheritdoc />\r\n        pu" +
                    "blic static ");
            
            #line 153 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" operator *(QDimensionless x, ");
            
            #line 153 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" y) => new (x * y._RawValue);\r\n\r\n        /// <inheritdoc />\r\n        public stati" +
                    "c QDimensionless operator /(");
            
            #line 156 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 156 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" y) => x._RawValue / y._RawValue;\r\n\r\n");
            
            #line 158 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
 if(!TargetTypeName.StartsWith("QDimensionless")) { 
            
            #line default
            #line hidden
            this.Write("        /// <inheritdoc />\r\n        public static ");
            
            #line 160 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" operator *(");
            
            #line 160 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, QDimensionless y) => new (x._RawValue * y);\r\n\r\n        /// <inheritdoc />\r\n  " +
                    "      public static ");
            
            #line 163 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" operator /(");
            
            #line 163 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, QDimensionless y) => new(x._RawValue / y);\r\n\r\n");
            
            #line 165 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        /// <inheritdoc />\r\n        public static ");
            
            #line 167 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" operator %(");
            
            #line 167 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 167 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" y) => new(x._RawValue % y._RawValue);\r\n\r\n        /// <inheritdoc />\r\n        pub" +
                    "lic static ");
            
            #line 170 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" AdditiveIdentity => default;\r\n\r\n        /// <inheritdoc />\r\n        public stati" +
                    "c QDimensionless MultiplicativeIdentity => default;\r\n\r\n        /// <inheritdoc /" +
                    ">\r\n        public static ");
            
            #line 176 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" operator +(");
            
            #line 176 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" value) => value;\r\n\r\n        /// <inheritdoc />\r\n        public static ");
            
            #line 179 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" operator -(");
            
            #line 179 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" value) => new(-value._RawValue);\r\n\r\n        #endregion\r\n    }\r\n\r\n\r\n    #region u" +
                    "nit operations\r\n");
            
            #line 186 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
 foreach(var op in UnitOperations) { 
            
            #line default
            #line hidden
            this.Write("\r\n    partial struct ");
            
            #line 188 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write("\r\n    #if NET7_0_OR_GREATER\r\n        : IDivisionOperators<");
            
            #line 190 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 190 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 190 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write(">\r\n    #endif\r\n    {\r\n        /// <inheritdoc />\r\n        public static ");
            
            #line 194 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write(" operator /(");
            
            #line 194 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 194 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write(" y) => new(x.RawValue / y.RawValue);\r\n    }\r\n\r\n    partial struct ");
            
            #line 197 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write("\r\n    #if NET7_0_OR_GREATER\r\n        : IMultiplyOperators<");
            
            #line 199 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 199 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 199 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write(">\r\n    #endif\r\n    {\r\n        /// <inheritdoc />\r\n        public static ");
            
            #line 203 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write(" operator *(");
            
            #line 203 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 203 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write(" y) => new(x.RawValue * y.RawValue);\r\n    }\r\n    \r\n");
            
            #line 206 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
     if(op.MultiplierType != op.MultiplicantType) { 
            
            #line default
            #line hidden
            this.Write("    partial struct ");
            
            #line 207 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write("\r\n    #if NET7_0_OR_GREATER\r\n        : IDivisionOperators<");
            
            #line 209 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 209 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 209 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write(">\r\n    #endif\r\n    {\r\n        /// <inheritdoc />\r\n        public static ");
            
            #line 213 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write(" operator /(");
            
            #line 213 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 213 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write(" y) => new(x.RawValue / y.RawValue);\r\n    }\r\n\r\n    partial struct ");
            
            #line 216 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write("\r\n    #if NET7_0_OR_GREATER\r\n        : IMultiplyOperators<");
            
            #line 218 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 218 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 218 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write(">\r\n    #endif\r\n    {\r\n        /// <inheritdoc />\r\n        public static ");
            
            #line 222 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write(" operator *(");
            
            #line 222 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 222 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write(" y) => new(x.RawValue * y.RawValue);\r\n    }\r\n");
            
            #line 224 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
     } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 226 "D:\develop\CSharp\NetQuantities\src\NetQuantities.Generators\QuantityImplement.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    #endregion\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class QuantityImplementBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
