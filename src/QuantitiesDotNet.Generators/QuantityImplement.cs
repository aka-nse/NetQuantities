// ------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン: 17.0.0.0
//  
//     このファイルへの変更は、正しくない動作の原因になる可能性があり、
//     コードが再生成されると失われます。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace QuantitiesDotNet.Generators
{
    using System.Linq;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class QuantityImplement : QuantityImplementBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"#nullable enable
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Numerics;
using System.Runtime.InteropServices;
using System.Text;

namespace QuantitiesDotNet
{
    [StructLayout(LayoutKind.Sequential, Pack = 1, Size = sizeof(double))]
    public partial struct ");
            
            #line 21 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 22 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
 if(!IsRefLikeType) { 
            
            #line default
            #line hidden
            this.Write("        : IQuantity<");
            
            #line 23 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n        , IComparable<");
            
            #line 24 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n        , IEquatable<");
            
            #line 25 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n    #if NET7_0_OR_GREATER\r\n        , IComparisonOperators<");
            
            #line 27 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 27 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", bool>\r\n        , IAdditionOperators<");
            
            #line 28 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 28 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 28 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n        , ISubtractionOperators<");
            
            #line 29 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 29 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 29 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n        , IMultiplyOperators<");
            
            #line 30 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", double, ");
            
            #line 30 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n        , IDivisionOperators<");
            
            #line 31 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", double, ");
            
            #line 31 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n        , IDivisionOperators<");
            
            #line 32 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 32 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", double>\r\n        , IModulusOperators<");
            
            #line 33 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 33 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 33 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n        , IAdditiveIdentity<");
            
            #line 34 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 34 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n        , IMultiplicativeIdentity<");
            
            #line 35 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", double>\r\n        , IUnaryPlusOperators<");
            
            #line 36 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 36 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n        , IUnaryNegationOperators<");
            
            #line 37 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 37 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(">\r\n    #endif\r\n");
            
            #line 39 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    {\r\n        /// <summary>\r\n        /// Gets quantity information instance for " +
                    "<see cref=\"");
            
            #line 42 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("\" />.\r\n        /// </summary>\r\n        public static QuantityInfo Info => _Info;\r" +
                    "\n\r\n        // for reflection of ref struct, explicitly named backing field is pr" +
                    "ovided.\r\n        internal static readonly QuantityInfo _Info = new(\r\n           " +
                    " \"");
            
            #line 48 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName.Substring(1)));
            
            #line default
            #line hidden
            this.Write("\",\r\n            L : ");
            
            #line 49 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QuantityDef.L));
            
            #line default
            #line hidden
            this.Write(",\r\n            M : ");
            
            #line 50 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QuantityDef.M));
            
            #line default
            #line hidden
            this.Write(",\r\n            T : ");
            
            #line 51 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QuantityDef.T));
            
            #line default
            #line hidden
            this.Write(",\r\n            I : ");
            
            #line 52 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QuantityDef.I));
            
            #line default
            #line hidden
            this.Write(",\r\n            Th: ");
            
            #line 53 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QuantityDef.Th));
            
            #line default
            #line hidden
            this.Write(",\r\n            N : ");
            
            #line 54 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QuantityDef.N));
            
            #line default
            #line hidden
            this.Write(",\r\n            J : ");
            
            #line 55 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QuantityDef.J));
            
            #line default
            #line hidden
            this.Write(");\r\n\r\n        /// <summary>\r\n        /// Gets quantity information instance for <" +
                    "see cref=\"");
            
            #line 58 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("\" />.\r\n        /// </summary>\r\n        public QuantityInfo InfoInstance => Info;\r" +
                    "\n\r\n        private readonly double _RawValue;\r\n\r\n        /// <summary>\r\n        " +
                    "/// The raw value of <see href=\"");
            
            #line 65 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("\" />.\r\n        /// </summary>\r\n        public double RawValue => _RawValue;\r\n\r\n  " +
                    "      internal ");
            
            #line 69 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("(double rawValue)\r\n            => _RawValue = rawValue;\r\n\r\n");
            
            #line 72 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
 GenerateBasicTypeShape(isGeneric: false); 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 74 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
 GenerateUnitDefinitionsShape(isGeneric: false); 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 76 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
 GenerateSelfOperatorsShape(isGeneric: false); 
            
            #line default
            #line hidden
            this.Write("    }\r\n\r\n\r\n    #region unit operations\r\n");
            
            #line 81 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
 foreach(var op in UnitOperations) { 
            
            #line default
            #line hidden
            this.Write("\r\n    partial struct ");
            
            #line 83 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 84 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
      if(!IsRefLikeType) { 
            
            #line default
            #line hidden
            this.Write("    #if NET7_0_OR_GREATER\r\n        : IDivisionOperators<");
            
            #line 86 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 86 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 86 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write(">\r\n    #endif\r\n");
            
            #line 88 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
      } 
            
            #line default
            #line hidden
            this.Write("    {\r\n        /// <inheritdoc />\r\n        public static ");
            
            #line 91 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write(" operator /(");
            
            #line 91 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 91 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write(" y) => new(x.RawValue / y.RawValue);\r\n    }\r\n\r\n    partial struct ");
            
            #line 94 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 95 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
      if(!IsRefLikeType) { 
            
            #line default
            #line hidden
            this.Write("    #if NET7_0_OR_GREATER\r\n        : IMultiplyOperators<");
            
            #line 97 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 97 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 97 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write(">\r\n    #endif\r\n");
            
            #line 99 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
      } 
            
            #line default
            #line hidden
            this.Write("    {\r\n        /// <inheritdoc />\r\n        public static ");
            
            #line 102 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write(" operator *(");
            
            #line 102 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 102 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write(" y) => new(x.RawValue * y.RawValue);\r\n    }\r\n\r\n");
            
            #line 105 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
      if(op.MultiplierType != op.MultiplicantType) { 
            
            #line default
            #line hidden
            this.Write("    partial struct ");
            
            #line 106 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 107 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
          if(!IsRefLikeType) { 
            
            #line default
            #line hidden
            this.Write("    #if NET7_0_OR_GREATER\r\n        : IDivisionOperators<");
            
            #line 109 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 109 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 109 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write(">\r\n    #endif\r\n");
            
            #line 111 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
          } 
            
            #line default
            #line hidden
            this.Write("    {\r\n        /// <inheritdoc />\r\n        public static ");
            
            #line 114 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write(" operator /(");
            
            #line 114 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 114 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write(" y) => new(x.RawValue / y.RawValue);\r\n    }\r\n\r\n    partial struct ");
            
            #line 117 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 118 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
          if(!IsRefLikeType) { 
            
            #line default
            #line hidden
            this.Write("    #if NET7_0_OR_GREATER\r\n        : IMultiplyOperators<");
            
            #line 120 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 120 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 120 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write(">\r\n    #endif\r\n");
            
            #line 122 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
          } 
            
            #line default
            #line hidden
            this.Write("    {\r\n        /// <inheritdoc />\r\n        public static ");
            
            #line 125 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write(" operator *(");
            
            #line 125 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write(" x, ");
            
            #line 125 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write(" y) => new(x.RawValue * y.RawValue);\r\n    }\r\n");
            
            #line 127 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
      } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 129 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    #endregion\r\n\r\n    partial class UnitShorthands\r\n    {\r\n");
            
            #line 134 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
 foreach(var unit in UnitSymbols) { 
            
            #line default
            #line hidden
            
            #line 135 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
     if(unit.ExportsShorthandSymbol) { 
            
            #line default
            #line hidden
            this.Write("            /// <summary> A symbol for <see cref=\"");
            
            #line 136 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("\" />. </summary>\r\n            [CLSCompliant(false)]\r\n            public static re" +
                    "adonly ");
            
            #line 138 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 138 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.ShortName));
            
            #line default
            #line hidden
            this.Write(" = new(");
            
            #line 138 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.Scale));
            
            #line default
            #line hidden
            this.Write(");\r\n\r\n");
            
            #line 140 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
     } 
            
            #line default
            #line hidden
            
            #line 141 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    }\r\n}\r\n\r\n\r\n#if NET7_0_OR_GREATER\r\nnamespace QuantitiesDotNet.Generic\r\n{\r\n    publ" +
                    "ic partial struct ");
            
            #line 149 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>\r\n");
            
            #line 150 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
 if(!IsRefLikeType) { 
            
            #line default
            #line hidden
            this.Write("        : IQuantity<");
            
            #line 151 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>, T>\r\n        , IComparable<");
            
            #line 152 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>>\r\n        , IEquatable<");
            
            #line 153 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>>\r\n        , IComparisonOperators<");
            
            #line 154 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 154 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>, bool>\r\n        , IAdditionOperators<");
            
            #line 155 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 155 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 155 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>>\r\n        , ISubtractionOperators<");
            
            #line 156 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 156 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 156 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>>\r\n        , IMultiplyOperators<");
            
            #line 157 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>, T, ");
            
            #line 157 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>>\r\n        , IDivisionOperators<");
            
            #line 158 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 158 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>, T>\r\n        , IModulusOperators<");
            
            #line 159 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 159 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 159 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>>\r\n        , IAdditiveIdentity<");
            
            #line 160 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 160 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>>\r\n        , IMultiplicativeIdentity<");
            
            #line 161 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>, T>\r\n        , IUnaryPlusOperators<");
            
            #line 162 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 162 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>>\r\n        , IUnaryNegationOperators<");
            
            #line 163 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 163 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("<T>>\r\n");
            
            #line 164 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        where T : INumber<T>\r\n    {\r\n        private readonly T _RawValue;\r\n\r\n   " +
                    "     /// <summary>\r\n        /// The raw value of <see href=\"");
            
            #line 170 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("{T}\" />.\r\n        /// </summary>\r\n        public T RawValue => _RawValue;\r\n\r\n    " +
                    "    internal ");
            
            #line 174 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("(T rawValue)\r\n            => _RawValue = rawValue;\r\n\r\n");
            
            #line 177 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
 GenerateBasicTypeShape(isGeneric: true); 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 179 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
 GenerateUnitDefinitionsShape(isGeneric: true); 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 181 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
 GenerateSelfOperatorsShape(isGeneric: true); 
            
            #line default
            #line hidden
            this.Write("    }\r\n\r\n\r\n    #region unit operations\r\n\r\n    /// NOTE: In specific case recursiv" +
                    "e generic interface causes JIT compile time increasing exponentially.\r\n    /// T" +
                    "herefore interface implementations are comment-outed until .Net runtime is impro" +
                    "ved.\r\n\r\n");
            
            #line 190 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
 foreach(var op in UnitOperations) { 
            
            #line default
            #line hidden
            this.Write("\r\n    partial struct ");
            
            #line 192 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write("<T>\r\n//        : IDivisionOperators<");
            
            #line 193 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 193 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 193 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write("<T>>\r\n    {\r\n        /// <inheritdoc />\r\n        public static ");
            
            #line 196 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write("<T> operator /(");
            
            #line 196 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write("<T> x, ");
            
            #line 196 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write("<T> y) => new(x.RawValue / y.RawValue);\r\n    }\r\n\r\n    partial struct ");
            
            #line 199 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write("<T>\r\n//        : IMultiplyOperators<");
            
            #line 200 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 200 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 200 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write("<T>>\r\n    {\r\n        /// <inheritdoc />\r\n        public static ");
            
            #line 203 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write("<T> operator *(");
            
            #line 203 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write("<T> x, ");
            
            #line 203 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write("<T> y) => new(x.RawValue * y.RawValue);\r\n    }\r\n\r\n");
            
            #line 206 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
     if(op.MultiplierType != op.MultiplicantType) { 
            
            #line default
            #line hidden
            this.Write("    partial struct ");
            
            #line 207 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write("<T>\r\n//        : IDivisionOperators<");
            
            #line 208 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 208 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 208 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write("<T>>\r\n    {\r\n        /// <inheritdoc />\r\n        public static ");
            
            #line 211 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write("<T> operator /(");
            
            #line 211 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write("<T> x, ");
            
            #line 211 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write("<T> y) => new(x.RawValue / y.RawValue);\r\n    }\r\n\r\n    partial struct ");
            
            #line 214 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write("<T>\r\n//        : IMultiplyOperators<");
            
            #line 215 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 215 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 215 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write("<T>>\r\n    {\r\n        /// <inheritdoc />\r\n        public static ");
            
            #line 218 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.ProductType));
            
            #line default
            #line hidden
            this.Write("<T> operator *(");
            
            #line 218 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplierType));
            
            #line default
            #line hidden
            this.Write("<T> x, ");
            
            #line 218 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(op.MultiplicantType));
            
            #line default
            #line hidden
            this.Write("<T> y) => new(x.RawValue * y.RawValue);\r\n    }\r\n");
            
            #line 220 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
     } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 222 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    #endregion\r\n\r\n    partial class UnitShorthands\r\n    {\r\n");
            
            #line 227 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
 foreach(var unit in UnitSymbols) { 
            
            #line default
            #line hidden
            
            #line 228 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
     if(unit.ExportsShorthandSymbol) { 
            
            #line default
            #line hidden
            this.Write("            /// <summary> A symbol for <see cref=\"");
            
            #line 229 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write("\" />. </summary>\r\n            [CLSCompliant(false)]\r\n            public static re" +
                    "adonly ");
            
            #line 231 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetTypeName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 231 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.ShortName));
            
            #line default
            #line hidden
            this.Write(" = new(");
            
            #line 231 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(unit.Scale));
            
            #line default
            #line hidden
            this.Write(");\r\n\r\n");
            
            #line 233 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
     } 
            
            #line default
            #line hidden
            
            #line 234 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    }\r\n}\r\n#endif\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 239 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"

public void GenerateBasicTypeShape(bool isGeneric)
{
    var targetTypeName = TargetTypeName + (isGeneric ? "<T>" : "");
    var entityTypeName = isGeneric ? "T" : "double";
    if(IsRefLikeType)
    {
        return;
    }

        
        #line default
        #line hidden
        
        #line 248 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write("        #region basic type implements\r\n\r\n        /// <inheritdoc />\r\n        publ" +
        "ic int CompareTo(object? obj)\r\n            => obj is ");

        
        #line default
        #line hidden
        
        #line 253 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 253 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" other\r\n            ? Compare(this, other)\r\n            : throw new ArgumentExcep" +
        "tion(nameof(obj));\r\n\r\n        /// <inheritdoc />\r\n        public int CompareTo(");

        
        #line default
        #line hidden
        
        #line 258 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 258 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" other) => Compare(this, other);\r\n\r\n        /// <inheritdoc />\r\n        public bo" +
        "ol Equals(");

        
        #line default
        #line hidden
        
        #line 261 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 261 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(@" other) => Equals(this, other);

        /// <summary>
        /// Tries to parse a string into a value.
        /// </summary>
        /// <param name=""s""></param>
        /// <param name=""provider""></param>
        /// <param name=""result""></param>
        /// <returns></returns>
        public static bool TryParse(string? s, IFormatProvider? provider, out ");

        
        #line default
        #line hidden
        
        #line 270 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 270 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" result)\r\n        {\r\n            if(!QuantityParseInfo.TryCompile(s, out var info" +
        "))\r\n            {\r\n                result = default;\r\n                return fal" +
        "se;\r\n            }\r\n            var (succeeded, value) = info.UnitSelector switc" +
        "h {\r\n");

        
        #line default
        #line hidden
        
        #line 278 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
      foreach(var unit in UnitSymbols) { 
        
        #line default
        #line hidden
        
        #line 278 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write("                \"");

        
        #line default
        #line hidden
        
        #line 279 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(unit.ShortName));

        
        #line default
        #line hidden
        
        #line 279 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write("\" => (");

        
        #line default
        #line hidden
        
        #line 279 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(entityTypeName));

        
        #line default
        #line hidden
        
        #line 279 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(".TryParse(info.Number, NumberStyles.Any, provider, out var x), From");

        
        #line default
        #line hidden
        
        #line 279 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));

        
        #line default
        #line hidden
        
        #line 279 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write("(x!)),\r\n");

        
        #line default
        #line hidden
        
        #line 280 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
      } 
        
        #line default
        #line hidden
        
        #line 280 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write("                _ => (false, default(");

        
        #line default
        #line hidden
        
        #line 281 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 281 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(@")),
            };
            result = value;
            return succeeded;
        }

        /// <summary>
        /// Parses a string into a value.
        /// </summary>
        /// <param name=""s""></param>
        /// <param name=""provider""></param>
        /// <returns></returns>
        /// <exception cref=""ArgumentNullException""></exception>
        /// <exception cref=""FormatException""></exception>
        public static ");

        
        #line default
        #line hidden
        
        #line 295 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 295 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(@" Parse(string? s, IFormatProvider? provider)
        {
            if(s is null)
                throw new ArgumentNullException(nameof(s));
            if(!TryParse(s, provider, out var result))
                throw new FormatException();
            return result;
        }

        /// <inheritdoc />
        public override string ToString()
            => ToString(null, CultureInfo.CurrentCulture);

        /// <summary>
        /// Formats the value of the current instance using the specified format.
        /// </summary>
        /// <param name=""format"">
        /// The format to use. -or- A null reference (Nothing in Visual Basic) to use the
        /// default format defined for the type of the System.IFormattable implementation.
        /// </param>
        /// <returns>
        /// The value of the current instance in the specified format.
        /// </returns>
        public string ToString(string? format)
            => ToString(format, CultureInfo.CurrentCulture);

        private (QuantityFormatInfo info, string number, string unit) GetFormatInfo(string? format, IFormatProvider? formatProvider)
        {
            if(!QuantityFormatInfo.TryCompile(format, out var info))
            {
                throw new FormatException();
            }

            var (value, unit) = info.UnitSelector switch {
");

        
        #line default
        #line hidden
        
        #line 329 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
      foreach(var unit in UnitSymbols) { 
        
        #line default
        #line hidden
        
        #line 329 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write("                \"");

        
        #line default
        #line hidden
        
        #line 330 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(unit.ShortName));

        
        #line default
        #line hidden
        
        #line 330 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write("\" => (");

        
        #line default
        #line hidden
        
        #line 330 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));

        
        #line default
        #line hidden
        
        #line 330 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(", \"");

        
        #line default
        #line hidden
        
        #line 330 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(unit.ShortName));

        
        #line default
        #line hidden
        
        #line 330 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write("\"),\r\n");

        
        #line default
        #line hidden
        
        #line 331 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
      } 
        
        #line default
        #line hidden
        
        #line 331 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write("                \"\" => (");

        
        #line default
        #line hidden
        
        #line 332 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryUnit.MajorName));

        
        #line default
        #line hidden
        
        #line 332 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(", \"");

        
        #line default
        #line hidden
        
        #line 332 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryUnit.ShortName));

        
        #line default
        #line hidden
        
        #line 332 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write("\"),\r\n                _ => throw new FormatException(),\r\n            };\r\n         " +
        "   var number = string.Format(formatProvider, \"{0:\" + info.NumberFormat + \"}\", v" +
        "alue);\r\n            return (info, number, unit);\r\n        }\r\n\r\n        /// <inhe" +
        "ritdoc />\r\n        public string ToString(string? format, IFormatProvider? forma" +
        "tProvider)\r\n        {\r\n            var (info, number, unit) = GetFormatInfo(form" +
        "at, formatProvider);\r\n            return info.Format(number, unit);\r\n        }\r\n" +
        "\r\n        #if NET6_0_OR_GREATER\r\n        /// <inheritdoc />\r\n        #else\r\n    " +
        "    /// <summary>\r\n        /// Tries to format the value of the current instance" +
        " into the provided span of characters.\r\n        /// </summary>\r\n        /// <par" +
        "am name=\"destination\">The span in which to write this instance\'s value formatted" +
        " as a span of characters.</param>\r\n        /// <param name=\"charsWritten\">When t" +
        "his method returns, contains the number of characters that were written in <para" +
        "mref name=\"destination\"/>.</param>\r\n        /// <param name=\"format\">A span cont" +
        "aining the characters that represent a standard or custom format string that def" +
        "ines the acceptable format for <paramref name=\"destination\"/>.</param>\r\n        " +
        "/// <param name=\"formatProvider\">An optional object that supplies culture-specif" +
        "ic formatting information for <paramref name=\"destination\"/>.</param>\r\n        /" +
        "// <returns><c>true</c> if the formatting was successful; otherwise, <c>false</c" +
        ">.</returns>\r\n        #endif\r\n        public bool TryFormat(Span<char> destinati" +
        "on, out int charsWritten, ReadOnlySpan<char> format, IFormatProvider? formatProv" +
        "ider)\r\n        {\r\n            var (info, number, unit) = GetFormatInfo(format.To" +
        "String(), formatProvider);\r\n            return info.TryFormat(destination, out c" +
        "harsWritten, number, unit);\r\n        }\r\n\r\n        /// <inheritdoc />\r\n        pu" +
        "blic override int GetHashCode()\r\n            => _RawValue.GetHashCode();\r\n\r\n    " +
        "    /// <inheritdoc />\r\n        public override bool Equals([NotNullWhen(true)] " +
        "object? obj)\r\n            => obj is ");

        
        #line default
        #line hidden
        
        #line 370 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 370 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" other && Equals(this, other);\r\n\r\n        #endregion  // basic type implements\r\n");

        
        #line default
        #line hidden
        
        #line 373 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"

}

public void GenerateUnitDefinitionsShape(bool isGeneric)
{
    var targetTypeName = TargetTypeName + (isGeneric ? "<T>" : "");
    var entityTypeName = isGeneric ? "T" : "double";
    var unitInfoTypeName = isGeneric ? "UnitInfo<T>" : "UnitInfo";
    var getUnitScaleFormat = isGeneric ? "T.CreateSaturating({0})" : "{0}";

        
        #line default
        #line hidden
        
        #line 382 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write("        #region unit definition implements\r\n\r\n        /// <summary> The unit info" +
        "rmations dictionary which is keyed by unit symbols. </summary>\r\n        public s" +
        "tatic readonly ImmutableDictionary<string, ");

        
        #line default
        #line hidden
        
        #line 386 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(unitInfoTypeName));

        
        #line default
        #line hidden
        
        #line 386 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write("> UnitsBySymbol = GetUnitsBySymbol();\r\n        private static ImmutableDictionary" +
        "<string, ");

        
        #line default
        #line hidden
        
        #line 387 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(unitInfoTypeName));

        
        #line default
        #line hidden
        
        #line 387 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write("> GetUnitsBySymbol()\r\n        {\r\n            var builder = ImmutableDictionary.Cr" +
        "eateBuilder<string, ");

        
        #line default
        #line hidden
        
        #line 389 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(unitInfoTypeName));

        
        #line default
        #line hidden
        
        #line 389 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(">();\r\n");

        
        #line default
        #line hidden
        
        #line 390 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
 foreach(var unit in UnitSymbols) { 
        
        #line default
        #line hidden
        
        #line 390 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write("            builder.Add(\"");

        
        #line default
        #line hidden
        
        #line 391 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(unit.ShortName));

        
        #line default
        #line hidden
        
        #line 391 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write("\", ");

        
        #line default
        #line hidden
        
        #line 391 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));

        
        #line default
        #line hidden
        
        #line 391 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write("Info);\r\n");

        
        #line default
        #line hidden
        
        #line 392 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
 } 
        
        #line default
        #line hidden
        
        #line 392 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write("            return builder.ToImmutable();\r\n        }\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 396 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
 foreach(var unit in UnitSymbols) { 
        
        #line default
        #line hidden
        
        #line 396 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write("        #region ");

        
        #line default
        #line hidden
        
        #line 397 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));

        
        #line default
        #line hidden
        
        #line 397 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write("\r\n\r\n        private static readonly ");

        
        #line default
        #line hidden
        
        #line 399 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(entityTypeName));

        
        #line default
        #line hidden
        
        #line 399 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" _");

        
        #line default
        #line hidden
        
        #line 399 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));

        
        #line default
        #line hidden
        
        #line 399 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write("Scale = ");

        
        #line default
        #line hidden
        
        #line 399 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(string.Format(getUnitScaleFormat, unit.Scale)));

        
        #line default
        #line hidden
        
        #line 399 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(";\r\n\r\n        /// <summary> The information for [");

        
        #line default
        #line hidden
        
        #line 401 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(unit.ShortName));

        
        #line default
        #line hidden
        
        #line 401 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write("]. </summary>\r\n        public static readonly ");

        
        #line default
        #line hidden
        
        #line 402 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(unitInfoTypeName));

        
        #line default
        #line hidden
        
        #line 402 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 402 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));

        
        #line default
        #line hidden
        
        #line 402 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write("Info = new (_");

        
        #line default
        #line hidden
        
        #line 402 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));

        
        #line default
        #line hidden
        
        #line 402 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write("Scale, \"");

        
        #line default
        #line hidden
        
        #line 402 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));

        
        #line default
        #line hidden
        
        #line 402 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write("\", \"");

        
        #line default
        #line hidden
        
        #line 402 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(unit.ShortName));

        
        #line default
        #line hidden
        
        #line 402 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write("\");\r\n\r\n        /// <summary>\r\n        /// Creates a new <see href=\"");

        
        #line default
        #line hidden
        
        #line 405 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName.Replace('<', '{').Replace('>', '}')));

        
        #line default
        #line hidden
        
        #line 405 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write("\" /> instance by interpreting the given real value in the scale of [");

        
        #line default
        #line hidden
        
        #line 405 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(unit.ShortName));

        
        #line default
        #line hidden
        
        #line 405 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write("].\r\n        /// </summary>\r\n        /// <param name=\"Second\"></param>\r\n        //" +
        "/ <returns></returns>\r\n        public static ");

        
        #line default
        #line hidden
        
        #line 409 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 409 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" From");

        
        #line default
        #line hidden
        
        #line 409 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));

        
        #line default
        #line hidden
        
        #line 409 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write("(");

        
        #line default
        #line hidden
        
        #line 409 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(entityTypeName));

        
        #line default
        #line hidden
        
        #line 409 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 409 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));

        
        #line default
        #line hidden
        
        #line 409 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(")\r\n            => new (");

        
        #line default
        #line hidden
        
        #line 410 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));

        
        #line default
        #line hidden
        
        #line 410 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" * _");

        
        #line default
        #line hidden
        
        #line 410 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));

        
        #line default
        #line hidden
        
        #line 410 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write("Scale);\r\n\r\n        /// <summary>\r\n        /// Gets the value of this instance in " +
        "[");

        
        #line default
        #line hidden
        
        #line 413 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(unit.ShortName));

        
        #line default
        #line hidden
        
        #line 413 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write("] scale.\r\n        /// </summary>\r\n        public ");

        
        #line default
        #line hidden
        
        #line 415 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(entityTypeName));

        
        #line default
        #line hidden
        
        #line 415 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 415 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));

        
        #line default
        #line hidden
        
        #line 415 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" => _RawValue / _");

        
        #line default
        #line hidden
        
        #line 415 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(unit.MajorName));

        
        #line default
        #line hidden
        
        #line 415 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write("Scale;\r\n\r\n        #endregion\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 419 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
 } 
        
        #line default
        #line hidden
        
        #line 419 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write("        #endregion  // unit definition implements\r\n");

        
        #line default
        #line hidden
        
        #line 421 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"

}

public void GenerateSelfOperatorsShape(bool isGeneric)
{
    var targetTypeName = TargetTypeName + (isGeneric ? "<T>" : "");
    var entityTypeName = isGeneric ? "T" : "double";
    var one = isGeneric ? "T.One" : "1.0";

        
        #line default
        #line hidden
        
        #line 429 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write("        #region operator implements\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 432 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
 if(!IsRefLikeType) { 
        
        #line default
        #line hidden
        
        #line 432 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(@"
        /// <summary>
        /// Determines whether the 2 values are same or not.
        /// </summary>
        /// <param name=""x""></param>
        /// <param name=""y""></param>
        /// <returns></returns>
        public static bool Equals(in ");

        
        #line default
        #line hidden
        
        #line 440 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 440 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" x, in ");

        
        #line default
        #line hidden
        
        #line 440 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 440 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(@" y) => x._RawValue == y._RawValue;

        /// <summary>
        /// Determines which value is greater than another.
        /// </summary>
        /// <param name=""x""></param>
        /// <param name=""y""></param>
        /// <returns></returns>
        public static int Compare(in ");

        
        #line default
        #line hidden
        
        #line 448 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 448 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" x, in ");

        
        #line default
        #line hidden
        
        #line 448 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 448 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" y)\r\n        {\r\n            if (x._RawValue == y._RawValue) { return 0; }\r\n      " +
        "      return x._RawValue < y._RawValue ? -1 : 1;\r\n        }\r\n\r\n        /// <inhe" +
        "ritdoc />\r\n        public static bool operator ==(");

        
        #line default
        #line hidden
        
        #line 455 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 455 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" x, ");

        
        #line default
        #line hidden
        
        #line 455 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 455 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" y) => Equals(x, y);\r\n\r\n        /// <inheritdoc />\r\n        public static bool op" +
        "erator !=(");

        
        #line default
        #line hidden
        
        #line 458 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 458 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" x, ");

        
        #line default
        #line hidden
        
        #line 458 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 458 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" y) => !Equals(x, y);\r\n\r\n        /// <inheritdoc />\r\n        public static bool o" +
        "perator <(");

        
        #line default
        #line hidden
        
        #line 461 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 461 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" x, ");

        
        #line default
        #line hidden
        
        #line 461 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 461 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" y) => Compare(x, y) < 0;\r\n\r\n        /// <inheritdoc />\r\n        public static bo" +
        "ol operator >(");

        
        #line default
        #line hidden
        
        #line 464 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 464 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" x, ");

        
        #line default
        #line hidden
        
        #line 464 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 464 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" y) => Compare(x, y) > 0;\r\n\r\n        /// <inheritdoc />\r\n        public static bo" +
        "ol operator <=(");

        
        #line default
        #line hidden
        
        #line 467 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 467 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" x, ");

        
        #line default
        #line hidden
        
        #line 467 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 467 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" y) => Compare(x, y) <= 0;\r\n\r\n        /// <inheritdoc />\r\n        public static b" +
        "ool operator >=(");

        
        #line default
        #line hidden
        
        #line 470 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 470 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" x, ");

        
        #line default
        #line hidden
        
        #line 470 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 470 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" y) => Compare(x, y) >= 0;\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 472 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
 } 
        
        #line default
        #line hidden
        
        #line 472 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write("\r\n        /// <inheritdoc />\r\n        public static ");

        
        #line default
        #line hidden
        
        #line 475 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 475 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" operator +(");

        
        #line default
        #line hidden
        
        #line 475 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 475 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" x, ");

        
        #line default
        #line hidden
        
        #line 475 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 475 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" y) => new (x._RawValue + y._RawValue);\r\n\r\n        /// <inheritdoc />\r\n        pu" +
        "blic static ");

        
        #line default
        #line hidden
        
        #line 478 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 478 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" operator-(");

        
        #line default
        #line hidden
        
        #line 478 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 478 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" x, ");

        
        #line default
        #line hidden
        
        #line 478 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 478 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" y) => new (x._RawValue - y._RawValue);\r\n\r\n        /// <inheritdoc />\r\n        pu" +
        "blic static ");

        
        #line default
        #line hidden
        
        #line 481 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 481 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" operator *(");

        
        #line default
        #line hidden
        
        #line 481 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(entityTypeName));

        
        #line default
        #line hidden
        
        #line 481 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" x, ");

        
        #line default
        #line hidden
        
        #line 481 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 481 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" y) => new (x * y._RawValue);\r\n\r\n        /// <inheritdoc />\r\n        public stati" +
        "c ");

        
        #line default
        #line hidden
        
        #line 484 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(entityTypeName));

        
        #line default
        #line hidden
        
        #line 484 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" operator /(");

        
        #line default
        #line hidden
        
        #line 484 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 484 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" x, ");

        
        #line default
        #line hidden
        
        #line 484 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 484 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" y) => x._RawValue / y._RawValue;\r\n\r\n        /// <inheritdoc />\r\n        public s" +
        "tatic ");

        
        #line default
        #line hidden
        
        #line 487 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 487 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" operator *(");

        
        #line default
        #line hidden
        
        #line 487 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 487 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" x, ");

        
        #line default
        #line hidden
        
        #line 487 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(entityTypeName));

        
        #line default
        #line hidden
        
        #line 487 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" y) => new (x._RawValue * y);\r\n\r\n        /// <inheritdoc />\r\n        public stati" +
        "c ");

        
        #line default
        #line hidden
        
        #line 490 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 490 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" operator /(");

        
        #line default
        #line hidden
        
        #line 490 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 490 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" x, ");

        
        #line default
        #line hidden
        
        #line 490 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(entityTypeName));

        
        #line default
        #line hidden
        
        #line 490 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" y) => new(x._RawValue / y);\r\n\r\n        /// <inheritdoc />\r\n        public static" +
        " ");

        
        #line default
        #line hidden
        
        #line 493 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 493 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" operator %(");

        
        #line default
        #line hidden
        
        #line 493 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 493 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" x, ");

        
        #line default
        #line hidden
        
        #line 493 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 493 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" y) => new(x._RawValue % y._RawValue);\r\n\r\n        /// <inheritdoc />\r\n        pub" +
        "lic static ");

        
        #line default
        #line hidden
        
        #line 496 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 496 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" AdditiveIdentity => default;\r\n\r\n        /// <inheritdoc />\r\n        public stati" +
        "c ");

        
        #line default
        #line hidden
        
        #line 499 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(entityTypeName));

        
        #line default
        #line hidden
        
        #line 499 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" MultiplicativeIdentity => ");

        
        #line default
        #line hidden
        
        #line 499 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(one));

        
        #line default
        #line hidden
        
        #line 499 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(";\r\n\r\n        /// <inheritdoc />\r\n        public static ");

        
        #line default
        #line hidden
        
        #line 502 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 502 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" operator +(");

        
        #line default
        #line hidden
        
        #line 502 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 502 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" value) => value;\r\n\r\n        /// <inheritdoc />\r\n        public static ");

        
        #line default
        #line hidden
        
        #line 505 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 505 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" operator -(");

        
        #line default
        #line hidden
        
        #line 505 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetTypeName));

        
        #line default
        #line hidden
        
        #line 505 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"
this.Write(" value) => new(-value._RawValue);\r\n\r\n        #endregion  // operator implements\r\n" +
        "");

        
        #line default
        #line hidden
        
        #line 508 "D:\develop\QuantitiesDotNet\src\QuantitiesDotNet.Generators\QuantityImplement.tt"

}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class QuantityImplementBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
